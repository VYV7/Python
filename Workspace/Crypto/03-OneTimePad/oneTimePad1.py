print("###############################################################################")
print("1----------------------------------------------------")
print("XOR function")
def xor(x, s):
	print(bin(x), "XOR", bin(s), "=", bin(x ^ s) )

xor(4, 8)
xor(4, 4)
xor(255, 1)
xor(255, 127)

print("\n2----------------------------------------------------")
# properties
# message ^ random = cipher
# cipher  ^ random = message

import random

def genKey(n):
	# generate a list of n random numbers between 0 to 256
	return bytes( [random.randrange(0, 256) for i in range(n)] )
	
def xorBytes(keyStream, message):
	length = min(len(keyStream), len(message))
	# XOR keyStream with message byte by byte
	return bytes( [keyStream[i] ^ message[i] for i in range(length)] )

###############################################################################

message = "YOU ARE AWESOME"
print("Original message:\n", message)
message = message.encode()		# Return an encoded version of the string as a bytes object.
print("Original message (bytes object):\n", message)


keyStream = genKey(len(message))
cipher = xorBytes(keyStream, message)


print("Key stream:\n", keyStream)
print("Ecnrypted:\n", cipher)
print("Decrypted:\n", xorBytes(keyStream, cipher))


print("\n3----------------------------------------------------")
# on time pad is unbreakable
# it cannot be broken with infinite computin power
# for that to be frue
# - key stream used only once
# - key stream known only by the sender and receiver
# - key stream generated by true random number generator
# - key size as large as the message itself
# - difficult key distribution

# given the cipher you can decrypt that cipher into
# any message of that cipher length.
# you can decrypt to anything of that same length

# ENEMY
message = "DO ATTACK"
print("Original message:\n", message)
message = message.encode()		# Return an encoded version of the string as a bytes object.
print("Original message (bytes object):\n", message)

keyStream = genKey(len(message))
cipher = xorBytes(keyStream, message)


# ME BREAKING THE CIPHER
#print("Key stream:\n", keyStream)
print("Ecnrypted:\n", cipher)
message = "NO ATTACK"					# guessing the message to get the key
message = message.encode()

guessKey = xorBytes(message, cipher) 	# using the guessed msg to generate the key
print("Guess:\n", guessKey)

print("Decrypted:\n", xorBytes(guessKey, cipher))












print("###############################################################################")
